import { serverInit } from '../../../../server'

import { knex, prepareDbForTests, sqlClose, sqlInit } from '../../../../databases/sql'

describe('Happy Path Login Endpoint test with DB connection', () => {
  const actionTableName = 'action'

  const testUrl = '/api/getactionstatuses'
  const testMethod = 'POST'

  let server

  beforeAll(async () => {
    await sqlInit()

    server = await serverInit()

    await prepareDbForTests()
  })

  afterAll(async () => {
    await knex(actionTableName).truncate()
    await server.stop()
    await sqlClose()
  })

  describe('Happy Path', () => {
    test('should return 200 and an object of the all action statuses (In this case by the child some actions done sofar)', async () => {
      const injectOptions = {
        method: testMethod,
        url: testUrl,
        payload: { accountId: 1, childId: 1 },
      }

      //The timeStamps are generated by the date.now so the test doesn't check the exact value
      const expectedResponse = {
        sleep: { actionId: 1, actionStart: 1656011746, actionEnd: null },
        brestFeed: { actionId: 2, actionStart: 1656011046, actionEnd: 1656011246 },
        walk: { actionId: 3, actionStart: 1656011346, actionEnd: 1656011646 },
        fallingAsleep: { actionId: 4, actionStart: null, actionEnd: null },
        eat: { actionId: 5, actionStart: null, actionEnd: null },
      }

      const res = await server.inject(injectOptions)

      const responseBody = JSON.parse(res.payload)

      //check the actionIds enums
      expect(res.statusCode).toEqual(200)
      expect(responseBody.sleep.actionId).toEqual(expectedResponse.sleep.actionId)
      expect(responseBody.brestFeed.actionId).toEqual(expectedResponse.brestFeed.actionId)
      expect(responseBody.walk.actionId).toEqual(expectedResponse.walk.actionId)
      expect(responseBody.fallingAsleep.actionId).toEqual(expectedResponse.fallingAsleep.actionId)
      expect(responseBody.eat.actionId).toEqual(expectedResponse.eat.actionId)
    })

    test('should return 200 and an object of the all action statuses (In this case by the child no any actions have been recorded so all the start and end should be null)', async () => {
      const injectOptions = {
        method: testMethod,
        url: testUrl,
        payload: { accountId: 1, childId: 3 },
      }

      //The timeStamps are generated by the date.now so the test doesn't check the exact value
      const expectedResponse = {
        sleep: { actionId: 1, actionStart: null, actionEnd: null },
        brestFeed: { actionId: 2, actionStart: null, actionEnd: null },
        walk: { actionId: 3, actionStart: null, actionEnd: null },
        fallingAsleep: { actionId: 4, actionStart: null, actionEnd: null },
        eat: { actionId: 5, actionStart: null, actionEnd: null },
      }

      const res = await server.inject(injectOptions)

      const responseBody = JSON.parse(res.payload)

      //check the actionIds enums
      expect(res.statusCode).toEqual(200)
      expect(responseBody.sleep.actionEnd).toEqual(expectedResponse.sleep.actionEnd)
      expect(responseBody.brestFeed.actionEnd).toEqual(expectedResponse.brestFeed.actionEnd)
      expect(responseBody.walk.actionEnd).toEqual(expectedResponse.walk.actionEnd)
      expect(responseBody.fallingAsleep.actionEnd).toEqual(expectedResponse.fallingAsleep.actionEnd)
      expect(responseBody.eat.actionEnd).toEqual(expectedResponse.eat.actionEnd)
    })
  })
})
